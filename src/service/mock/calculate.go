// Code generated by MockGen. DO NOT EDIT.
// Source: src/service/calculate.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalculate is a mock of Calculate interface.
type MockCalculate struct {
	ctrl     *gomock.Controller
	recorder *MockCalculateMockRecorder
}

// MockCalculateMockRecorder is the mock recorder for MockCalculate.
type MockCalculateMockRecorder struct {
	mock *MockCalculate
}

// NewMockCalculate creates a new mock instance.
func NewMockCalculate(ctrl *gomock.Controller) *MockCalculate {
	mock := &MockCalculate{ctrl: ctrl}
	mock.recorder = &MockCalculateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculate) EXPECT() *MockCalculateMockRecorder {
	return m.recorder
}

// Service mocks base method.
func (m *MockCalculate) Service(loopNumber int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", loopNumber)
	ret0, _ := ret[0].(int)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockCalculateMockRecorder) Service(loopNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockCalculate)(nil).Service), loopNumber)
}
